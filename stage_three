import math
import random
class Hardy_Weinberg:
    """This class takes no input but asks for various frequencies and numbers. 
    If the frequencies are not known, please type 0."""
    def __init__(self,p=0,q=0,qq=0,size=0,generations=0):
        print "This class asks for the frequency of alleles or genotypes. You must know the frequency of the dominant or recessive allele or genotype to run this class."
        reply = raw_input("Do you know the frequency of the dominant allele? ")
        if reply == "yes" or reply == "Yes" or reply == "y":
            self.p = input("What is the frequency of the dominant allele? ")
            if self.p > 1 or self.p < 0:
                self.p = input("The frequency of the dominant allele must be between 0 and 1. Enter it again. ")
            self.q = self.get_q()
        else:
            reply_2 = raw_input("Do you know the frequency of the recessive allele? ")
            if reply_2 == "yes" or reply_2 == "Yes" or reply_2 == "y":
                self.q = input("What is the frequency of the recessive allele? ")
                if self.q > 1 or self.q < 0:
                    self.q = input("The frequency of the recessive allele must be between 0 and 1. Enter it again. ")
                self.p = self.get_p()
            else:
                reply_3 = raw_input("Do you know the frequency of the recessive phenotype? ")
                if reply_3 == "yes" or reply_3 == "Yes" or reply_3 == "y":
                    self.qq = input("What is the frequency of the recessive phenotype? ")
                    if self.qq > 1 or self.qq < 0:
                        self.qq = input("The frequency of the recessive phenotype must be between 0 and 1. Enter it again. ")
                    self.q = self.get_q_from_qq()
                    self.p = self.get_p()
                else:
                    reply_4 = raw_input("Do you know the frequency of the dominant genotype? ")
                    if reply_4 == "yes" or reply_4 == "Yes" or reply_4 == "y":
                        self.pp = input("What is the frequency of the dominant genotype? ")
                        if self.pp > 1 or self.pp < 0:
                            self.pp = input("The frequency of the dominant genotype must be between 0 and 1. Enter it again. ")
                        self.p = math.sqrt(self.pp)
                        self.q = self.get_q()
        self.size = input("What is the size of your population? ")
        self.generations = input("How many generations do you want to run this for? ")
        
    def get_p(self):
        """Returns the frequency of the dominant allele given the frequency
        of the recessive allele."""
        self.p = 1 - self.q
        return self.p
        
    def get_q(self):
        """Returns the frequency of the recessive allele given the frequency
        of the dominant allele."""
        self.q = 1 - self.p
        return self.q
        
    def get_q_from_qq(self):
        """Returns the frequency of the recessive allele given the number of
        recessive phenotypes."""
        self.q = math.sqrt(self.qq)
        return self.q
        
    def get_heterozygotes(self):
        """Returns the probability of a heterozygous individual."""
        hetero = 1 - self.p**2 - self.q**2
        return hetero
    
    def get_pp(self):
        """Return the probability of a homozygous dominant."""
        pp = self.p**2
        return pp
        
    def get_qq(self):
        """Returns the probability of a homozygous recessive."""
        self.qq = self.q**2
        return self.qq
        
    def get_phenotype(self):
        """Returns the predicted number of individuals with various phenotypes
        given the allele frequencies."""
        reply = raw_input("Is the dominant phenotype the same as the heterozygous phenotype? ")
        if reply == "yes" or reply == "Yes":
            print "There are ", self.size*(self.get_pp() + self.get_heterozygotes()) ,"individuals predicted to have the dominant phenotype."
            print "There are ", self.size*(self.get_qq()) ,"individuals predicted to have the recessive phenotype."
        else:
            print "There are ", self.size*self.get_pp() ,"individuals predicted to have the dominant phenotype."
            print "There are ",  self.size*self.get_heterozygotes() ,"individuals predicted to have the heterozygous phenotype."
            print "There are ", self.size*self.get_qq() ,"individuals predicted to have the recessive phenotype."
      
    def natural_selection(self):
      """Asks for the rate of survivial for the genotypes and returns the allele
      frequencies at the specified generation, or the generation at which one
      allele is lost."""
      survival_pp = input("What is the rate of survival of a homozygous dominant individual? ")
      if survival_pp > 1 or survival_pp < 0:
            survival_pp = input("Please select a number between 0 and 1.")
      survival_pq = input("What is the rate of survival of a heterozygous individual? ")
      if survival_pq > 1 or survival_pq < 0:
            survival_pq = input("Please select a number between 0 and 1.")
      survival_qq = input("What is the rate of survival of a homozygous recessive individual? ")
      if survival_qq > 1 or survival_qq < 0:
            survival_qq = input("Please select a number between 0 and 1.")
      p = self.p
      q = self.q
      size = self.size
      for i in range(self.generations):
          num_pp = (p**2)*float(size)*survival_pp
          num_pq = (2*p*q)*float(size)*survival_pq
          num_qq = (q**2)*float(size)*survival_qq
          gametes = 2*num_pp + 2*num_pq + 2*num_qq
          p = (2*num_pp + num_pq)/float(gametes)
          q = 1 - p
          size = num_pp + num_pq + num_qq
          if p < 0.001:
              print "The dominant allele has been lost at generation ", i
              return
          if q < 0.001:
              print "The recessive allele has been lost at generation ", i
              return
      print "The new frequency for the dominant allele is ", p
      print "The new frequency for the recessive allele is ", q
  
class equilibrium:
    """This class takes no input but asks for various numbers. If the information
    is not known, please press zero."""
    def __init__(self, sample = 0, dominant = 0, recessive = 0, hetero = 0):
        self.sample = input("What is the size of your sample? ")
        self.dominant = input("How many individuals with the dominant genotype do you have? ")
        self.recessive = input("How many individuals with the recessive genotype do you have? ")
        self.hetero = input("How many individuals with the heterozygous genotype do you have? ")
        self.p = (2*float(self.dominant)+self.hetero)/(2*self.sample)
        self.q = (2*float(self.recessive)+self.hetero)/(2*self.sample)
        self.expected = self.get_expected()
        
    def get_expected(self):
        """This function returns the expected number of individuals with various
        genotypes given the allele frequencies."""
        self.expected = []
        self.expected.append(self.p**2 * self.sample)
        self.expected.append(self.q**2 * self.sample)
        self.expected.append(2*self.p*self.q *self.sample)
        return self.expected
        
    def get_chi_square(self):
        """This function calculates the chi square test statistic and compares it to the critical
        values at alpha 0.05 and 0.01 for one degrees of freedom."""
        chi_square = (((self.dominant - self.expected[0])**2)/self.expected[0]) + (((self.recessive - self.expected[1])**2)/self.expected[1]) + (((self.hetero - self.expected[2])**2)/self.expected[2])
        p = "The data is not significantly different from expected at an alpha of 0.05 and 0.01."
        if chi_square > 3.84:
            p = "The data is significantly different from expected at an alpha of 0.05."
        if chi_square > 6.64:
            p = "The data is significantly different from expected at an alpha of 0.01."
        #print chi_square
        return p  
  
if __name__=='__main__':
    test = Hardy_Weinberg()
    #print test.p
    #print test.q
    #print test.get_q_from_qq()
    #print test.get_heterozygotes()
    test.natural_selection()
    """test2 = equilibrium()
    print test2.get_chi_square()"""
